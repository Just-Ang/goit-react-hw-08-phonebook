{"version":3,"file":"static/js/632.32138d22.chunk.js","mappings":"gMACA,EAAsB,yB,0BCITA,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MAIXC,GAASC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAV,IAC1BC,GAAeH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMG,SAASC,KAAnB,KACtCC,EAAAA,EAAAA,YAAU,WACRT,GAASU,EAAAA,EAAAA,MACV,GAAE,CAACV,IAEJ,IAMMW,EALGL,EAAaJ,QAAO,SAAAU,GAAO,OAChCA,EAAQC,KAAKC,cAAcC,SAASb,EAAOY,cADX,IAUpC,OACE,wBACGH,EAAgBK,KAAI,gBAAGC,EAAH,EAAGA,GAAIJ,EAAP,EAAOA,KAAMK,EAAb,EAAaA,OAAb,OACnB,0BACGL,EADH,KACWK,GACT,mBACEC,QAAS,kBARE,SAAAF,GAAE,OAAIjB,GAASoB,EAAAA,EAAAA,IAAcH,GAA3B,CAQEI,CAAaJ,EAAnB,EACTK,UAAWC,EACXC,KAAK,SAHP,sBAFOP,EADU,KAc1B,EC1CD,EAAwB,sBAAxB,EAAsD,sB,SCmBtD,EAfe,WACb,IAAMjB,GAAWC,EAAAA,EAAAA,MAMjB,OACE,mBAAOqB,UAAWC,EAAlB,mCAEE,kBAAOD,UAAWC,EAAWC,KAAK,OAAOC,SARxB,SAAAC,GACnB,IAAMC,EAAaD,EAAEE,cAAcC,MACnC7B,GAAS8B,EAAAA,EAAAA,GAAcH,GAExB,MAOF,ECCGI,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACff,EAAK,GACLgB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEff,GADEoB,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOpB,CACR,EClCD,EAAuB,0BAAvB,EAAyD,2BAAzD,EAA4F,2BAA5F,EAA6H,yBCMhHuB,EAAc,WACzB,IAAMxC,GAAWC,EAAAA,EAAAA,MAEXwC,EAASV,IACTW,EAAWX,IAWjB,OACE,kBAAMT,UAAWC,EAAUoB,SAXR,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAOF,EAAIhB,cACXf,EAAOiC,EAAKC,SAASlC,KAAKgB,MAC1BX,EAAS4B,EAAKC,SAAS7B,OAAOW,MACpCiB,EAAKE,QACLhD,GAASiD,EAAAA,EAAAA,IAAW,CAACpC,KAAAA,EAAMK,OAAAA,IAE5B,EAGC,WACE,mBAAOI,UAAWC,EAAW2B,QAAST,EAAtC,kBAEE,kBACEnB,UAAWC,EACXN,GAAIwB,EACJjB,KAAK,OACLX,KAAK,OACLsC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,mBAAO/B,UAAWC,EAAW2B,QAASR,EAAtC,oBAEE,kBACEpB,UAAWC,EACXN,GAAIyB,EACJlB,KAAK,MACLX,KAAK,SACLsC,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAGZ,mBAAQ/B,UAAWC,EAASC,KAAK,SAAjC,2BAKL,EC5BC,EArBgB,WACd,OACE,iBACE8B,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,SAAU,GACVC,MAAO,WAPX,WAUE,uCACA,SAACpB,EAAD,KACA,sCACA,SAAC,EAAD,KACA,SAACzC,EAAD,MAGL,C","sources":["webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/contactForm/contactForm.module.css?5312","components/contactForm/ContactForm.jsx","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ContactList_btn__6Piat\"};","import { useEffect } from 'react';\nimport css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact, fetchContacts } from 'redux/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  //const { items, isLoading, error } = useSelector(state => state.contacts);\n  // console.log( items, isLoading, error)\n\n  const filter = useSelector(state => state.filters);\n  const contactaList = useSelector(state => state.contacts.items);\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getVisibleContacts = () => {\n    return contactaList.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const visibleContacts = getVisibleContacts();\n  //console.log(visibleContacts);\n\n  const handleDelete = id => dispatch(deleteContact(id));\n\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <button\n            onClick={() => handleDelete(id)}\n            className={css.btn}\n            type=\"button\"\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Filter_label__vEd1E\",\"input\":\"Filter_input__N7T3z\"};","import React from 'react';\nimport css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/filterSlice';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const changeFilter = e => {\n    const inputValue = e.currentTarget.value;\n    dispatch(filterContact(inputValue));\n    //console.log(inputValue);\n  };\n  return (\n    <label className={css.label}>\n      Find contacts by name\n      <input className={css.input} type=\"text\" onChange={changeFilter} />\n    </label>\n  );\n};\n\nexport default Filter;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__kCEi4\",\"label\":\"contactForm_label__cLo1s\",\"input\":\"contactForm_input__xdbl5\",\"btn\":\"contactForm_btn__iLGf9\"};","import { nanoid } from 'nanoid';\nimport css from '../contactForm/contactForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { addContact} from 'redux/operations';\n\n\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n\n  const nameId = nanoid();\n  const numberId = nanoid();\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const form = evt.currentTarget;\n    const name = form.elements.name.value;\n    const number = form.elements.number.value;\n    form.reset();\n    dispatch(addContact({name, number}));\n  \n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.label} htmlFor={nameId}>\n        Name\n        <input\n          className={css.input}\n          id={nameId}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={css.label} htmlFor={numberId}>\n        Number\n        <input\n          className={css.input}\n          id={numberId}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={css.btn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { ContactList } from \"components/ContactList/ContactList\";\nimport Filter from \"components/Filter/Filter\";\nimport { ContactForm } from \"components/contactForm/ContactForm\";\n\n const Contacts = () => {\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center',\n          fontSize: 30,\n          color: '#010101',\n        }}\n      >\n        <h1 >Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  };\n\n  export default Contacts"],"names":["ContactList","dispatch","useDispatch","filter","useSelector","state","filters","contactaList","contacts","items","useEffect","fetchContacts","visibleContacts","contact","name","toLowerCase","includes","map","id","number","onClick","deleteContact","handleDelete","className","css","type","onChange","e","inputValue","currentTarget","value","filterContact","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","nameId","numberId","onSubmit","evt","preventDefault","form","elements","reset","addContact","htmlFor","pattern","title","required","style","display","flexDirection","justifyContent","alignItems","fontSize","color"],"sourceRoot":""}